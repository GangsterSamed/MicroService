services:
  # Database Service
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
      PGSTARTTIMEOUT: 30
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservice-net

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    networks:
      - microservice-net

  # User Service
  user:
    build:
      context: .
      dockerfile: user/Dockerfile
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: users
      DB_SSLMODE: disable
      GRPC_PORT: 50051
      LOG_LEVEL: ${LOG_LEVEL}
      GRPC_CONNECT_TIMEOUT: 30s
      GRPC_SERVER_START_DELAY: 5s
    networks:
      - microservice-net
    depends_on:
      - db

  # Auth Service
  auth:
    build:
      context: .
      dockerfile: auth/Dockerfile
    environment:
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE_HOURS: 24
      USER_SERVICE_ADDR: user:50051
      GRPC_PORT: 50051
      GRPC_CONNECT_TIMEOUT: 30s
    networks:
      - microservice-net
    depends_on:
      - user

  # Geo Service
  geo:
    build:
      context: .
      dockerfile: geo/Dockerfile
    environment:
      DADATA_API_KEY: ${DADATA_API_KEY}
      DADATA_SECRET_KEY: ${DADATA_SECRET_KEY}
      AUTH_SERVICE_ADDR: auth:50051
      GRPC_SERVER_ADDR: :50051
      REDIS_ADDR: redis:6379
      LOG_LEVEL: ${LOG_LEVEL}
      GRPC_CONNECT_TIMEOUT: 30s
    networks:
      - microservice-net
    depends_on:
      - auth
      - redis

  # Proxy Service (полностью сохранена конфигурация)
  proxy:
    build:
      context: .
      dockerfile: proxy/Dockerfile
    ports:
      - "8080:8080"
    environment:
      ENV: ${ENV:-development}
      GEO_SERVICE_ADDR: geo:50051
      AUTH_SERVICE_ADDR: auth:50051
      USER_SERVICE_ADDR: user:50051
      LOG_LEVEL: ${LOG_LEVEL}
      GRPC_CONNECT_TIMEOUT: 30s
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
    networks:
      - microservice-net
    depends_on:
      - geo
      - auth
      - user

networks:
  microservice-net:
    driver: bridge
    name: geo-network

volumes:
  postgres_data:
    name: geo-postgres-data
  redis_data:
    name: geo-redis-data